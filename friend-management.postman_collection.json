{
	"variables": [],
	"info": {
		"name": "friend-management",
		"_postman_id": "cae4170a-237a-ee91-f102-174abc4e06d2",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "1.init-flow",
			"description": "",
			"item": [
				{
					"name": "[SUC] Reset, remove all relationships",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/setting/reset",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Get all users in the game",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/setting/users",
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "2.friend-flow",
			"description": "",
			"item": [
				{
					"name": "[Fail] Trump wants to make friend with no one",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The parameter:friends should be an array with two items\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/create",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"donald.j.trump@usa.com\"]\n}"
						},
						"description": "The parameter:friends should be an array with two items"
					},
					"response": []
				},
				{
					"name": "[FAIL] Make friend amongst Xi, Trump and Theresa",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The parameter:friends should be an array with two items\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/create",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"xi.jingping@china.com\", \"donald.j.trump@usa.com\", \"theresa.may@uk.com\"]\n}"
						},
						"description": "The parameter:friends should be an array with two items"
					},
					"response": []
				},
				{
					"name": "[FAIL] Songva, who is out-of-game, wants to make friend with Xi",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"One or Both of the users is/are not registered\";",
									""
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/create",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"friends\" : [\"songva@gmail.com\", \"xi.jingping@china.com\"]\n}"
						},
						"description": "One or Both of the users is/are not registered"
					},
					"response": []
				},
				{
					"name": "[SUC] Xi and Trump are friends",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/create",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"xi.jingping@china.com\",\"donald.j.trump@usa.com\"]\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[FAIL] Xi wants to make friend with Trump again",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"Their friendship has already been built up\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/create",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"xi.jingping@china.com\",\"donald.j.trump@usa.com\"]\n}"
						},
						"description": "Their friendship has already been built up"
					},
					"response": []
				},
				{
					"name": "[FAIL] Trump wants to make friend with Xi again",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"Their friendship has already been built up\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/create",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"donald.j.trump@usa.com\", \"xi.jingping@china.com\"]\n}"
						},
						"description": "Their friendship has already been built up"
					},
					"response": []
				},
				{
					"name": "[FAIL] Trump wants to make friend with himself",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"Cannot make a user friend to her/himself\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/create",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"donald.j.trump@usa.com\", \"donald.j.trump@usa.com\"]\n}"
						},
						"description": "Cannot make a user friend to her/himself"
					},
					"response": []
				},
				{
					"name": "[SUC] Theresa made friend with Xi",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/create",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"xi.jingping@china.com\", \"theresa.may@uk.com\"]\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Merkel made friend with Xi",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/create",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"angela.merkel@germany.com\", \"xi.jingping@china.com\"]\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Merkel listed her friends, there is only Xi",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;",
									"tests[\"Friends count is 1\"] = jsonData.count === 1 && jsonData.friends.length === 1;",
									"tests[\"Friends content is right\"] = jsonData.friends[0] === \"xi.jingping@china.com\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/list",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\" : \"angela.merkel@germany.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Xi listed his friends, there are Trump, Theresa, and Merkel",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;",
									"tests[\"Friends count is 3\"] = jsonData.count === 3 && jsonData.friends.length === 3;",
									"tests[\"Friends content is right\"] = [\"donald.j.trump@usa.com\", \"theresa.may@uk.com\",\"angela.merkel@germany.com\"].indexOf(jsonData.friends[0]) > -1 && [\"donald.j.trump@usa.com\", \"theresa.may@uk.com\",\"angela.merkel@germany.com\"].indexOf(jsonData.friends[1]) > -1 && [\"donald.j.trump@usa.com\", \"theresa.may@uk.com\",\"angela.merkel@germany.com\"].indexOf(jsonData.friends[2]) > -1;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/list",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\" : \"xi.jingping@china.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[FAIL] Songva wants to list his friends",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The users is not registered\";",
									"tests[\"friends is null\"] = jsonData.friends === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/list",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\" : \"songva@gmail.com\"\n}"
						},
						"description": "The users is not registered"
					},
					"response": []
				},
				{
					"name": "[FAIL] Hamad, he doesn't have any friends",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"There is no friend connections to this user\";",
									"tests[\"friends is null\"] = jsonData.friends === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/list",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\" : \"hamad.bin.khalifa@qatar.com\"\n}"
						},
						"description": "There is no friend connections to this user"
					},
					"response": []
				},
				{
					"name": "[FAIL] Xi and Trump have no friends in common",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"They have no friends in common\";",
									"tests[\"friends is null\"] = jsonData.friends === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/listInCommon",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"xi.jingping@china.com\",\"donald.j.trump@usa.com\"]\n}"
						},
						"description": "They have no friends in common"
					},
					"response": []
				},
				{
					"name": "[FAIL] Trump tried to get friends in common with no one",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The friends parameter should be an array with two items\";",
									"tests[\"friends is null\"] = jsonData.friends === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/listInCommon",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"donald.j.trump@usa.com\"]\n}"
						},
						"description": "The friends parameter should be an array with two items"
					},
					"response": []
				},
				{
					"name": "[FAIL] Get common friends of Xi, Trump, and Theresa",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The friends parameter should be an array with two items\";",
									"tests[\"friends is null\"] = jsonData.friends === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/listInCommon",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"xi.jingping@china.com\", \"donald.j.trump@usa.com\", \"theresa.may@uk.com\"]\n}"
						},
						"description": "The friends parameter should be an array with two items"
					},
					"response": []
				},
				{
					"name": "[FAIL] Songva wants to get common friends with Xi",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"One or Both of the users is/are not registered\";",
									"tests[\"friends is null\"] = jsonData.friends === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/listInCommon",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"xi.jingping@china.com\", \"songva@gmail.com\"]\n}"
						},
						"description": "One or Both of the users is/are not registered"
					},
					"response": []
				},
				{
					"name": "[SUC] Get common friends of Merkel and Trump",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"Friends count is 1\"] = jsonData.count === 1 && jsonData.friends.length === 1;",
									"tests[\"Friends content is right\"] = jsonData.friends[0] === \"xi.jingping@china.com\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/listInCommon",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"angela.merkel@germany.com\", \"donald.j.trump@usa.com\"]\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "3.subsribe flow",
			"description": "",
			"item": [
				{
					"name": "[FAIL] Anonymous user wants to subscribe to Trump",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The requestor should be specified as parameter:requestor\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/subscribe",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"target\" : \"donald.j.trump@usa.com\"\n}"
						},
						"description": "The requestor should be specified as parameter:requestor"
					},
					"response": []
				},
				{
					"name": "[FAIL] Trump feels confused whom to subscribe to",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The target should be specified as parameter:target\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/subscribe",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"donald.j.trump@usa.com\"\n}"
						},
						"description": "The target should be specified as parameter:target"
					},
					"response": []
				},
				{
					"name": "[FAIL] Trump tried to subscribe to himself",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"Cannot subscribe to a user her/himself\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/subscribe",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"donald.j.trump@usa.com\",\n  \"target\" : \"donald.j.trump@usa.com\"\n}"
						},
						"description": "Cannot subscribe to a user her/himself"
					},
					"response": []
				},
				{
					"name": "[FAIL] Poor Songva wants to subscribe to Xi",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The target or requestor is/are not registered\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/subscribe",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"songva@gmail.com\",\n  \"target\" : \"xi.jingping@china.com\"\n}"
						},
						"description": "The target or requestor is/are not registered"
					},
					"response": []
				},
				{
					"name": "[SUC] Xi subscribed to Trump",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/subscribe",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"xi.jingping@china.com\",\n  \"target\" : \"donald.j.trump@usa.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[FAIL] Xi tries to subscribe to Trump again",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown properly\"] = jsonData.errorMsg === \"The requestor has already subscribed to the target\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/subscribe",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"xi.jingping@china.com\",\n  \"target\" : \"donald.j.trump@usa.com\"\n}"
						},
						"description": "The requestor has already subscribed to the target"
					},
					"response": []
				},
				{
					"name": "[SUC] Trump also subscribed to Xi",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/subscribe",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"donald.j.trump@usa.com\",\n  \"target\" : \"xi.jingping@china.com\"\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "4.block-flow",
			"description": "",
			"item": [
				{
					"name": "[FAIL] Anonymous user wants to block Trump",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The requestor should be specified as parameter:requestor\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/block",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"target\" : \"donald.j.trump@usa.com\"\n}"
						},
						"description": "The requestor should be specified as parameter:requestor"
					},
					"response": []
				},
				{
					"name": "[FAIL] Trump may like to block everyone",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The target should be specified as parameter:target\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/block",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"donald.j.trump@usa.com\"\n}"
						},
						"description": "The target should be specified as parameter:target"
					},
					"response": []
				},
				{
					"name": "[FAIL] Trump also wants to block the poor Songva",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The target or requestor is/are not registered\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/block",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"donald.j.trump@usa.com\",\n  \"target\" : \"songva@gmail.com\"\n}"
						},
						"description": "The target or requestor is/are not registered"
					},
					"response": []
				},
				{
					"name": "[FAIL] Trump even wants to block himself",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"Cannot block the user her/himself\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/block",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"donald.j.trump@usa.com\",\n  \"target\" : \"donald.j.trump@usa.com\"\n}"
						},
						"description": "Cannot block the user her/himself"
					},
					"response": []
				},
				{
					"name": "[SUC] Hamad blocked Trump",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/block",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"hamad.bin.khalifa@qatar.com\",\n  \"target\" : \"donald.j.trump@usa.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[FAIL] Hamad tries to block Trump again",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown properly\"] = jsonData.errorMsg === \"The target has already been blacklisted by the requestor\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/block",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"hamad.bin.khalifa@qatar.com\",\n  \"target\" : \"donald.j.trump@usa.com\"\n}"
						},
						"description": "The target has already been blacklisted by the requestor"
					},
					"response": []
				},
				{
					"name": "[FAIL] Then Hamad regreted, he turns to make friend with Trump",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown properly\"] = jsonData.errorMsg === \"One of the users has blackedlisted the other\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/create",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"hamad.bin.khalifa@qatar.com\",\"donald.j.trump@usa.com\"]\n}"
						},
						"description": "One of the users has blackedlisted the other"
					},
					"response": []
				},
				{
					"name": "[FAIL] Hamad beg Trump to make friend with him",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown properly\"] = jsonData.errorMsg === \"One of the users has blackedlisted the other\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/friend/create",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"friends\" : [\"donald.j.trump@usa.com\",\"hamad.bin.khalifa@qatar.com\"]\n}"
						},
						"description": "One of the users has blackedlisted the other"
					},
					"response": []
				},
				{
					"name": "[SUC] Finally Trump blocked Hamad",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/block",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"donald.j.trump@usa.com\",\n  \"target\" : \"hamad.bin.khalifa@qatar.com\"\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "5.publish-flow",
			"description": "",
			"item": [
				{
					"name": "[FAIL] Anonymous user wants to publish a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The sender should be specified as parameter:sender\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/publish/post",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\" : \"Hello world\"\n}"
						},
						"description": "The requestor should be specified as parameter:requestor"
					},
					"response": []
				},
				{
					"name": "[FAIL] Poor Songva tries to publish a post",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The sender is/are not registered\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/publish/post",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sender\" : \"songva@gmail.com\",\n  \"text\" : \"Hello world\"\n}"
						},
						"description": "The sender is/are not registered"
					},
					"response": []
				},
				{
					"name": "[FAIL] Trump tries to publish a post with no content",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is false\"] = jsonData.success === false;",
									"tests[\"ErrorMsg shown correctly\"] = jsonData.errorMsg === \"The content of post should be specified as parameter:text\";"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/publish/post",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sender\" : \"donald.j.trump@usa.com\"\n}"
						},
						"description": "The content of post should be specified as parameter:text"
					},
					"response": []
				},
				{
					"name": "[SUC] Xi published a post and mentioned Shinzo",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;",
									"tests[\"Recipients count is 4\"] = jsonData.recipients.length === 4;",
									"",
									"var candidates = [\"donald.j.trump@usa.com\", \"theresa.may@uk.com\", \"angela.merkel@germany.com\", \"shinzo.abe@japan.com\"];",
									"",
									"tests[\"Recipients are correct\"] = candidates.indexOf(jsonData.recipients[0]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[1]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[2]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[3]) > -1"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/publish/post",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sender\" : \"xi.jingping@china.com\",\n  \"text\" : \"Belt & Road, @shinzo.abe@japan.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Theresa subscribed to Xi, although she has already been a friend of Xi",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/subscribe",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"theresa.may@uk.com\",\n  \"target\" : \"xi.jingping@china.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Xi published the same post again, but Theresa is not notified twice",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;",
									"tests[\"Recipients count is 4\"] = jsonData.recipients.length === 4;",
									"",
									"var candidates = [\"donald.j.trump@usa.com\", \"theresa.may@uk.com\", \"angela.merkel@germany.com\", \"shinzo.abe@japan.com\"];",
									"",
									"tests[\"Recipients are correct\"] = candidates.indexOf(jsonData.recipients[0]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[1]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[2]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[3]) > -1"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/publish/post",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sender\" : \"xi.jingping@china.com\",\n  \"text\" : \"Belt & Road, @shinzo.abe@japan.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Marcon subscribed to Xi",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/subscribe",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"emmanuel.macron@france.com\",\n  \"target\" : \"xi.jingping@china.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Xi published another post, then Marcon received the notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;",
									"tests[\"Recipients count is 5\"] = jsonData.recipients.length === 5;",
									"",
									"var candidates = [\"donald.j.trump@usa.com\", \"theresa.may@uk.com\", \"angela.merkel@germany.com\", \"shinzo.abe@japan.com\", \"emmanuel.macron@france.com\"];",
									"",
									"tests[\"Recipients are correct\"] = candidates.indexOf(jsonData.recipients[0]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[1]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[2]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[3]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[4]) > -1"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/publish/post",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sender\" : \"xi.jingping@china.com\",\n  \"text\" : \"Belt & Road, @shinzo.abe@japan.com @songva@gmail.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Slut Trump blocked Xi",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/block",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"requestor\" : \"donald.j.trump@usa.com\",\n  \"target\" : \"xi.jingping@china.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Xi published another post, then Trump got no notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;",
									"tests[\"Recipients count is 4\"] = jsonData.recipients.length === 4;",
									"",
									"var candidates = [\"theresa.may@uk.com\", \"angela.merkel@germany.com\", \"shinzo.abe@japan.com\", \"emmanuel.macron@france.com\"];",
									"",
									"tests[\"Recipients are correct\"] = candidates.indexOf(jsonData.recipients[0]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[1]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[2]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[3]) > -1"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/publish/post",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sender\" : \"xi.jingping@china.com\",\n  \"text\" : \"Belt & Road, @shinzo.abe@japan.com @songva@gmail.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Trump will no longer receive updates from Xi, even if Xi mentioned him",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;",
									"tests[\"Recipients count is 4\"] = jsonData.recipients.length === 4;",
									"",
									"var candidates = [\"theresa.may@uk.com\", \"angela.merkel@germany.com\", \"shinzo.abe@japan.com\", \"emmanuel.macron@france.com\"];",
									"",
									"tests[\"Recipients are correct\"] = candidates.indexOf(jsonData.recipients[0]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[1]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[2]) > -1",
									"                               && candidates.indexOf(jsonData.recipients[3]) > -1"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/publish/post",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sender\" : \"xi.jingping@china.com\",\n  \"text\" : \"Belt & Road, @shinzo.abe@japan.com @donald.j.trump@usa.com\"\n}"
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "[SUC] Hamad published a post, but no one knows",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Success is true\"] = jsonData.success === true;",
									"tests[\"No errorMsg\"] = jsonData.errorMsg === undefined;",
									"tests[\"Recipients is empty\"] = jsonData.recipients.length === 0;"
								]
							}
						}
					],
					"request": {
						"url": "{{domain.name}}/publish/post",
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sender\" : \"hamad.bin.khalifa@qatar.com\",\n  \"text\" : \"World Peace\"\n}"
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}